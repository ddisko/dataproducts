## of averages of 40 exponentials where lambda = 0.2
## we expect that the mean is the inverse of lambda (1/lambda) or 5.0000
## we expect the variance will be lambda^2 / number of exponentials or 0.625
simdata <- rep(NA,1000)
for (i in 1:1000)
{simdata[i] <- mean(rexp(40,0.2))}
simmean <- mean(simdata)
## simmean
simvar <- var(simdata)
## simvar
## over several trials the mean of the simulated data varied from 4.9882 to 5.0115
## the variace of the data also fell near the expected 0.625 number ranging from 0.5991 to 0.6337
## increasing the number of averages or the number of exponentials did not vary the
## range of the mean to any significant extent
## plot distribution
## we expect the curve to follow a normal distribution
## plot a histogram of the data with a distribution curve
## overlay a normal distribution curve in green
simhisto <- scale(simdata)
hist(simhisto,probability=T, main="", ylim=c(0, 0.5))
lines(density(simhisto))
curve(dnorm(x,0,1), -3, 3, col="green", add=T)
## these curves are nearly identical and across several trials can directly overlay each other
## run confidence intervals
## expecting a 95% CI
boundlow <- simdata - qnorm(0.975) * (1/0.2)/sqrt(40)
boundhigh <- simdata + qnorm(0.975) * (1/0.2)/sqrt(40)
overallbounds <- mean(boundlow < (1/0.2) & boundhigh > (1/0.2))
## overallbounds
## simulated data yeilds a 95.3% to 96.3% CI across trials
##output
simmean
simvar
overallbounds
## create a simulated data set of exponential distribution of over one thousand oberservations
## of averages of 40 exponentials where lambda = 0.2
## we expect that the mean is the inverse of lambda (1/lambda) or 5.0000
## we expect the variance will be lambda^2 / number of exponentials or 0.625
simdata <- rep(NA,1000)
for (i in 1:1000)
{simdata[i] <- mean(rexp(40,0.2))}
simmean <- mean(simdata)
## simmean
simvar <- var(simdata)
## simvar
## over several trials the mean of the simulated data varied from 4.9882 to 5.0115
## the variace of the data also fell near the expected 0.625 number ranging from 0.5991 to 0.6337
## increasing the number of averages or the number of exponentials did not vary the
## range of the mean to any significant extent
## plot distribution
## we expect the curve to follow a normal distribution
## plot a histogram of the data with a distribution curve
## overlay a normal distribution curve in green
simhisto <- scale(simdata)
hist(simhisto,probability=T, main="", ylim=c(0, 0.5))
lines(density(simhisto))
curve(dnorm(x,0,1), -3, 3, col="green", add=T)
## these curves are nearly identical and across several trials can directly overlay each other
## run confidence intervals
## expecting a 95% CI
boundlow <- simdata - qnorm(0.975) * (1/0.2)/sqrt(40)
boundhigh <- simdata + qnorm(0.975) * (1/0.2)/sqrt(40)
overallbounds <- mean(boundlow < (1/0.2) & boundhigh > (1/0.2))
## overallbounds
## simulated data yeilds a 95.3% to 96.3% CI across trials
##output
simmean
simvar
overallbounds
simdata
## create a simulated data set of exponential distribution of over one thousand oberservations
## of averages of 40 exponentials where lambda = 0.2
## we expect that the mean is the inverse of lambda (1/lambda) or 5.0000
## we expect the variance will be lambda^2 / number of exponentials or 0.625
simdata <- rep(NA,1000)
for (i in 1:1000)
{simdata[i] <- mean(rexp(140,0.2))}
simmean <- mean(simdata)
## simmean
simvar <- var(simdata)
## simvar
## over several trials the mean of the simulated data varied from 4.9882 to 5.0115
## the variace of the data also fell near the expected 0.625 number ranging from 0.5991 to 0.6337
## increasing the number of averages or the number of exponentials did not vary the
## range of the mean to any significant extent
## plot distribution
## we expect the curve to follow a normal distribution
## plot a histogram of the data with a distribution curve
## overlay a normal distribution curve in green
simhisto <- scale(simdata)
hist(simhisto,probability=T, main="", ylim=c(0, 0.5))
lines(density(simhisto))
curve(dnorm(x,0,1), -3, 3, col="green", add=T)
## these curves are nearly identical and across several trials can directly overlay each other
## run confidence intervals
## expecting a 95% CI
boundlow <- simdata - qnorm(0.975) * (1/0.2)/sqrt(40)
boundhigh <- simdata + qnorm(0.975) * (1/0.2)/sqrt(40)
overallbounds <- mean(boundlow < (1/0.2) & boundhigh > (1/0.2))
## overallbounds
## simulated data yeilds a 95.3% to 96.3% CI across trials
##output
simmean
simvar
overallbounds
## create a simulated data set of exponential distribution of over one thousand oberservations
## of averages of 40 exponentials where lambda = 0.2
## we expect that the mean is the inverse of lambda (1/lambda) or 5.0000
## we expect the variance will be lambda^2 / number of exponentials or 0.625
simdata <- rep(NA,1000)
for (i in 1:1000)
{simdata[i] <- mean(rexp(140,0.2))}
simmean <- mean(simdata)
## simmean
simvar <- var(simdata)
## simvar
## over several trials the mean of the simulated data varied from 4.9882 to 5.0115
## the variace of the data also fell near the expected 0.625 number ranging from 0.5991 to 0.6337
## increasing the number of averages or the number of exponentials did not vary the
## range of the mean to any significant extent
## plot distribution
## we expect the curve to follow a normal distribution
## plot a histogram of the data with a distribution curve
## overlay a normal distribution curve in green
simhisto <- scale(simdata)
hist(simhisto,probability=T, main="", ylim=c(0, 0.5))
lines(density(simhisto))
curve(dnorm(x,0,1), -3, 3, col="green", add=T)
## these curves are nearly identical and across several trials can directly overlay each other
## run confidence intervals
## expecting a 95% CI
boundlow <- simdata - qnorm(0.975) * (1/0.2)/sqrt(140)
boundhigh <- simdata + qnorm(0.975) * (1/0.2)/sqrt(140)
overallbounds <- mean(boundlow < (1/0.2) & boundhigh > (1/0.2))
## overallbounds
## simulated data yeilds a 95.3% to 96.3% CI across trials
##output
simmean
simvar
overallbounds
## create a simulated data set of exponential distribution of over one thousand oberservations
## of averages of 40 exponentials where lambda = 0.2
## we expect that the mean is the inverse of lambda (1/lambda) or 5.0000
## we expect the variance will be lambda^2 / number of exponentials or 0.625
simdata <- rep(NA,1000)
for (i in 1:1000)
{simdata[i] <- mean(rexp(40,0.2))}
simmean <- mean(simdata)
## simmean
simvar <- var(simdata)
## simvar
## over several trials the mean of the simulated data varied from 4.9882 to 5.0115
## the variace of the data also fell near the expected 0.625 number ranging from 0.5991 to 0.6337
## increasing the number of averages or the number of exponentials did not vary the
## range of the mean to any significant extent
## plot distribution
## we expect the curve to follow a normal distribution
## plot a histogram of the data with a distribution curve
## overlay a normal distribution curve in green
simhisto <- scale(simdata)
hist(simhisto,probability=T, main="", ylim=c(0, 0.5))
lines(density(simhisto))
curve(dnorm(x,0,1), -3, 3, col="green", add=T)
## these curves are nearly identical and across several trials can directly overlay each other
## run confidence intervals
## expecting a 95% CI
boundlow <- simdata - qnorm(0.975) * (1/0.2)/sqrt(40)
boundhigh <- simdata + qnorm(0.975) * (1/0.2)/sqrt(40)
overallbounds <- mean(boundlow < (1/0.2) & boundhigh > (1/0.2))
## overallbounds
## simulated data yeilds a 95.3% to 96.3% CI across trials
##output
simmean
simvar
overallbounds
data(ToothGrowth)boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Grow th Data")
data(ToothGrowth)boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Grow th Data")
data(ToothGrowth)
boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Grow th Data")
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Grow th Data")
summary(ToothGrowth)
VC <- ToothGrowth[ToothGrowth$supp == 'VC',]
VC.doses <- as.data.frame(with(VC,split(len,dose)))
names(VC.doses) <- c('VC_d0.5','VC_d1','VC_d2.0')
OJ <- ToothGrowth[ToothGrowth$supp == 'OJ',]
OJ.doses <- as.data.frame(with(OJ,split(len,dose)))
names(OJ.doses) <- c('OJ_d0.5','OJ_d1','OJ_d2.0')
TG.reshaped <- cbind(VC.doses,OJ.doses)
TG.reshaped
t.test(TG.reshaped['OJ_d0.5'] - TG.reshaped['VC_d0.5'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d1.0'] - TG.reshaped['VC_d1.0'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d2.0'] - TG.reshaped['VC_d2.0'],paired = F,var.equal = F)$conf
VC <- ToothGrowth[ToothGrowth$supp == 'VC',]
VC.doses <- as.data.frame(with(VC,split(len,dose)))
names(VC.doses) <- c('VC_d0.5','VC_d1.0','VC_d2.0')
OJ <- ToothGrowth[ToothGrowth$supp == 'OJ',]
OJ.doses <- as.data.frame(with(OJ,split(len,dose)))
names(OJ.doses) <- c('OJ_d0.5','OJ_d1.0','OJ_d2.0')
TG.reshaped <- cbind(VC.doses,OJ.doses)
TG.reshaped
t.test(TG.reshaped['OJ_d0.5'] - TG.reshaped['VC_d0.5'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d1.0'] - TG.reshaped['VC_d1.0'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d2.0'] - TG.reshaped['VC_d2.0'],paired = F,var.equal = F)$conf
summary(TG.reshaped)
## load data set library
library(datasets)
##load tooth growth data
data(ToothGrowth)
## Examine data
str(ToothGrowth)
## perform a boxplot visual analysis to determine the nature of the data
boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", main="Boxplot of Tooth Growth Data")
## reorganize data with columns representing dosage - delivery
VC <- ToothGrowth[ToothGrowth$supp == 'VC',]
VC.doses <- as.data.frame(with(VC,split(len,dose)))
names(VC.doses) <- c('VC_d0.5','VC_d1.0','VC_d2.0')
OJ <- ToothGrowth[ToothGrowth$supp == 'OJ',]
OJ.doses <- as.data.frame(with(OJ,split(len,dose)))
names(OJ.doses) <- c('OJ_d0.5','OJ_d1.0','OJ_d2.0')
TG.reshaped <- cbind(VC.doses,OJ.doses)
TG.reshaped
## summarize organized data
summary(TG.reshaped)
## T Test by dosage group between OJ and VC
t.test(TG.reshaped['OJ_d0.5'] - TG.reshaped['VC_d0.5'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d1.0'] - TG.reshaped['VC_d1.0'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d2.0'] - TG.reshaped['VC_d2.0'],paired = F,var.equal = F)$conf
## load data set library
library(datasets)
##load tooth growth data
data(ToothGrowth)
## Examine data
str(ToothGrowth)
## perform a boxplot visual analysis to determine the nature of the data
boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", xlab="Delivery - Dosage", main="Tooth Growth Data")
## reorganize data with columns representing dosage - delivery
VC <- ToothGrowth[ToothGrowth$supp == 'VC',]
VC.doses <- as.data.frame(with(VC,split(len,dose)))
names(VC.doses) <- c('VC_d0.5','VC_d1.0','VC_d2.0')
OJ <- ToothGrowth[ToothGrowth$supp == 'OJ',]
OJ.doses <- as.data.frame(with(OJ,split(len,dose)))
names(OJ.doses) <- c('OJ_d0.5','OJ_d1.0','OJ_d2.0')
TG.reshaped <- cbind(VC.doses,OJ.doses)
TG.reshaped
## summarize organized data
summary(TG.reshaped)
## T Test by dosage group between OJ and VC
t.test(TG.reshaped['OJ_d0.5'] - TG.reshaped['VC_d0.5'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d1.0'] - TG.reshaped['VC_d1.0'],paired = F,var.equal = F)$conf
t.test(TG.reshaped['OJ_d2.0'] - TG.reshaped['VC_d2.0'],paired = F,var.equal = F)$conf
## load data set library and target data
library(datasets)
data(ToothGrowth)
## Examine data
str(ToothGrowth)
## perform a boxplot visual analysis to determine the nature of the data
boxplot(len ~ supp * dose, data=ToothGrowth, ylab="Tooth Length", xlab="Delivery - Dosage", main="Tooth Growth Data")
## reorganize data with columns representing dosage - delivery
VC <- ToothGrowth[ToothGrowth$supp == 'VC',]
VCdose <- as.data.frame(with(VC,split(len,dose)))
names(VCdose) <- c('0.5VC','1.0VC','2.0VC')
OJ <- ToothGrowth[ToothGrowth$supp == 'OJ',]
OJdose <- as.data.frame(with(OJ,split(len,dose)))
names(OJdose) <- c('0.5OJ','1.0OJ','2.0OJ')
reorgeddata <- cbind(VCdose,OJdose)
reorgeddata
## summarize organized data
summary(reorgeddata)
## T Test by dosage group between OJ and VC not paired and equal variance not assumed
t.test(reorgeddata['0.5OJ'] - reorgeddata['0.5VC'],paired = F,var.equal = F)$conf
t.test(reorgeddata['1.0OJ'] - reorgeddata['1.0VC'],paired = F,var.equal = F)$conf
t.test(reorgeddata['2.0OJ'] - reorgeddata['2.0VC'],paired = F,var.equal = F)$conf
swirl
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent,galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs,rhs)
vaChild <- var(child)
vaChild <- var(Child)
varChild <- var(Child)
varChild <- var(child, galton)
galton
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, (varRes + varEst))
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
fit$residuals^2 / n-2
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$child - mu)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit$residuals)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1 - sRes / sTot
summary(fit)$r
summary(fit)$r.squared
cor(fit)
cor(child ~ parent)
cor(child, parent)
cor(child, parent, galton)
cor(galton$child, galton$parent)
cor(galton$parent,galton$child)^2
install.packages(c("boot", "class", "cluster", "codetools", "digest", "dplyr", "foreign", "httr", "jsonlite", "KernSmooth", "magrittr", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "Rcmdr", "Rcpp", "RCurl", "rpart", "RSQLite", "spatial", "sqldf", "swirl", "tcltk2", "testthat", "xlsx", "xlsxjars"))
install.packages(c("boot", "class", "cluster", "codetools", "digest",
install.packages(c("boot", "class", "cluster", "codetools", "digest", "dplyr", "foreign", "httr", "jsonlite", "KernSmooth", "magrittr", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "Rcmdr", "Rcpp", "RCurl", "rpart", "RSQLite", "spatial", "sqldf", "swirl", "tcltk2", "testthat", "xlsx", "xlsxjars"))
install.packages(c("boot", "class", "cluster", "codetools", "digest",
install.packages(c("boot", "class", "cluster", "codetools", "digest", "dplyr", "foreign", "httr", "jsonlite", "KernSmooth", "magrittr", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "Rcmdr", "Rcpp", "RCurl", "rpart", "RSQLite", "spatial", "sqldf", "swirl", "tcltk2", "testthat", "xlsx", "xlsxjars"))
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("parallel", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial"))
install.packages("texmex")
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - neab(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("googleVis")
library("googleVis", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
demo(googleVis)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='ddisko', token='C2133CDB5A3BFC70C31F69BCDC73BC78', secret='GIoOQ+OeKKTSCK7GXDa7mD0D9mtj/k620LpM7rQb')
shinyUI(pageWithSidebar( headerPanel("Example plot"), sidebarPanel(    sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.0 5,)), mainPanel(    plotOutput('newHist') )))
shinyUI(pageWithSidebar( headerPanel("Example plot"), sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
), mainPanel(
plotOutput('newHist') )
))
library(UsingR)data(galton)shinyServer( function(input, output) {    output$myHist <- renderPlot({        hist(galton$child, xlab='child height', col='lightblue',main='Histogram') mu <- input$mu        lines(c(mu, mu), c(0, 200),col="red",lwd=5)        mse <- mean((galton$child - mu)^2)        text(63, 150, paste("mu = ", mu))        text(63, 140, paste("MSE = ", round(mse, 2)))    })} )
install.packages("UsingR")
library(UsingR)data(galton)shinyServer( function(input, output) {    output$myHist <- renderPlot({        hist(galton$child, xlab='child height', col='lightblue',main='Histogram') mu <- input$mu        lines(c(mu, mu), c(0, 200),col="red",lwd=5)        mse <- mean((galton$child - mu)^2)        text(63, 150, paste("mu = ", mu))        text(63, 140, paste("MSE = ", round(mse, 2)))    })} )
library(UsingR)
data(galton)
shinyServer( function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram') mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
} )
getwd()
library(shiny)
runApp()
getwd()
setwd("desk top")
setwd("desktop")
getwd()
setwd('dataproducts')
setwd('data products')
setwd("project")
runApp()
runApp()
shinyapps::deployApp()
library(shiny)
getwd()
runExample("project")
runApp("project")
runApp("/project")
runApp("~/project")
getwd()
setwd("/Users/ddisko/Desktop/data products")
runApp("/project")
runApp("~/project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("~/project")
runApp("~/project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
setwd(shiny)
setwd("shiny")
setwd("/shiny")
getwd()
setwd("/project/shiny")
setwd("project")
setwd("shiny")
getwd()
runApp("shiny")
runApp()
getwd()
setwd("/Users/ddisko/Desktop/data products/project")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
author("dataproducts")
library(slidify)
author("dataproducts")
git config --global ddisko "David Disko"
git config --global user.email david.disko@gmail.com
git config --global user.name "David Disko"
?git config
git config
git
?git
git
getwd()
setwd("/Users/ddisko/Desktop/data products/project")
runApp()
runApp()
runApp()
runApp()
deployApp()
library(shinyapps)
deployApp()
getwd()
setwd("/Users/ddisko/Desktop/dataproducts")
runapp()
runApp()
deployApp()
